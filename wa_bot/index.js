const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const path = require('path');

// Importar node-fetch dinamicamente
let fetch;

// Configura√ß√µes
const PIPELINE_URL = process.env.PIPELINE_URL || 'http://python_pipeline:8000';
const SESSION_PATH = './sessions/session.json';

console.log('üöÄ Iniciando WhatsApp Bot - Keep OCR Query');
console.log(`üì° Pipeline URL: ${PIPELINE_URL}`);

// Criar diret√≥rio de sess√µes se n√£o existir
const sessionsDir = path.dirname(SESSION_PATH);
if (!fs.existsSync(sessionsDir)) {
    fs.mkdirSync(sessionsDir, { recursive: true });
    console.log(`üìÅ Diret√≥rio de sess√µes criado: ${sessionsDir}`);
}

// Vari√°veis para reconex√£o
let reconnectAttempts = 0;
const maxReconnectAttempts = 5;

// Configurar cliente WhatsApp com op√ß√µes otimizadas
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "keep-ocr-bot",
        dataPath: "./sessions"
    }),
    puppeteer: {
        // Usar novo modo headless para compatibilidade
        headless: 'new',
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--disable-extensions',
            '--disable-component-extensions-with-background-pages',
            '--disable-default-apps',
            '--mute-audio',
            '--no-default-browser-check',
            '--disable-features=site-per-process',
            '--disable-web-security'
        ],
        executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || '/usr/bin/google-chrome-stable',
        timeout: 120000, // 2 minutos de timeout
        ignoreHTTPSErrors: true
    },
    webVersionCache: {
        type: 'none', // Desativar cache de vers√£o
    }
});

// Adicionar logs detalhados para depura√ß√£o
console.log('üîÑ Puppeteer configurado com configura√ß√£o robusta para ambientes Docker.');
console.log('üìÅ Caminho do Chrome:', process.env.PUPPETEER_EXECUTABLE_PATH || '/usr/bin/google-chrome-stable');

// Fun√ß√£o para consultar o pipeline
async function queryPipeline(text) {
    try {
        // Carregar fetch se ainda n√£o foi carregado
        if (!fetch) {
            const fetchModule = await import('node-fetch');
            fetch = fetchModule.default;
        }
        
        const url = `${PIPELINE_URL}/query?text=${encodeURIComponent(text)}`;
        console.log(`üîç Consultando pipeline: ${text.substring(0, 50)}...`);
        
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error(`Pipeline error ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.text();
        console.log(`‚úÖ Resposta recebida (${result.length} chars)`);
        return result;
        
    } catch (error) {
        console.error(`‚ùå Erro ao consultar pipeline: ${error.message}`);
        throw error;
    }
}

// Fun√ß√£o para inicializar com tratamento de erro
function initializeClient() {
    try {
        console.log('üîÑ Inicializando cliente WhatsApp...');
        client.initialize().catch(error => {
            console.error('‚ùå Erro durante a inicializa√ß√£o:', error);
            handleReconnect();
        });
    } catch (error) {
        console.error('‚ùå Exce√ß√£o ao inicializar cliente:', error);
        handleReconnect();
    }
}

// Fun√ß√£o para lidar com reconex√£o
function handleReconnect() {
    reconnectAttempts++;
    
    if (reconnectAttempts <= maxReconnectAttempts) {
        console.log(`üîÑ Tentativa de reconex√£o ${reconnectAttempts}/${maxReconnectAttempts} em 15 segundos...`);
        setTimeout(() => {
            initializeClient();
        }, 15000); // 15 segundos entre tentativas
    } else {
        console.error('‚ùå N√∫mero m√°ximo de tentativas de reconex√£o atingido. Reiniciando container...');
        process.exit(1); // Docker ir√° reiniciar o container se configurado com restart policy
    }
}

// Event listeners
client.on('qr', (qr) => {
    console.log('üì± QR Code gerado! Escaneie com seu WhatsApp:');
    qrcode.generate(qr, { small: true });
    console.log('üí° Dica: Ap√≥s escanear, a sess√£o ser√° salva e n√£o ser√° necess√°rio escanear novamente.');
    // Reset reconex√£o ap√≥s QR bem-sucedido
    reconnectAttempts = 0;
});

client.on('ready', () => {
    console.log('‚úÖ WhatsApp Web est√° pronto!');
    console.log('üîÑ Bot est√° rodando e aguardando mensagens que come√ßam com "!"');
    // Reset reconex√£o ap√≥s inicializa√ß√£o bem-sucedida
    reconnectAttempts = 0;
});

client.on('authenticated', () => {
    console.log('üîê Autenticado com sucesso!');
    // Reset reconex√£o ap√≥s autentica√ß√£o bem-sucedida
    reconnectAttempts = 0;
});

client.on('auth_failure', (msg) => {
    console.error('‚ùå Falha na autentica√ß√£o:', msg);
    handleReconnect();
});

client.on('disconnected', (reason) => {
    console.log('üîå Desconectado:', reason);
    handleReconnect();
});

// Listener principal para mensagens
client.on('message', async (msg) => {
    // Ignorar mensagens de grupos, status e que n√£o come√ßam com !
    if (msg.from.includes('@g.us') || msg.from.includes('status@broadcast') || !msg.body.startsWith('!')) {
        return;
    }
    
    // Extrair query (remover o !)
    const query = msg.body.slice(1).trim();
    
    if (!query) {
        await msg.reply('‚ùì Por favor, envie uma pergunta ap√≥s o "!"\nExemplo: !listar tarefas pendentes');
        return;
    }
    
    console.log(`üì® Nova mensagem de ${msg.from}: ${query}`);
    
    try {
        // Indicar que est√° digitando
        await msg.reply('üîç Consultando suas notas...');
        
        // Consultar o pipeline
        const answer = await queryPipeline(query);
        
        // Enviar resposta
        await msg.reply(answer);
        
        console.log(`‚úÖ Resposta enviada para ${msg.from}`);
        
    } catch (error) {
        console.error(`‚ùå Erro ao processar mensagem: ${error.message}`);
        await msg.reply('‚ùå Erro ao consultar notas. Tente mais tarde.\n\nSe o problema persistir, verifique se o sistema est√° funcionando.');
    }
});

// Tratamento de erros gerais
client.on('error', (error) => {
    console.error('‚ùå Erro do cliente WhatsApp:', error);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Recebido sinal de interrup√ß√£o. Desconectando...');
    await client.destroy();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\nüõë Recebido sinal de t√©rmino. Desconectando...');
    await client.destroy();
    process.exit(0);
});

// Inicializar cliente com tratamento de erros
initializeClient();
