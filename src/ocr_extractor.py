#!/usr/bin/env python3
"""
OCR de Notas Manuscritas - Extrator de texto manuscrito usando OpenAI Vision API

"""

import openai
import gkeepapi
import base64
import os
import sys
import time
import getpass
import tempfile
import shutil
import requests
import json
from pathlib import Path
from PIL import Image
from datetime import datetime, timezone

# Importar ChromaIndexer para indexa√ß√£o sem√¢ntica
try:
    from .chroma_indexer import index_note_in_chroma
    CHROMA_AVAILABLE = True
except ImportError:
    try:
        # Fallback para importa√ß√£o absoluta
        from src.chroma_indexer import index_note_in_chroma
        CHROMA_AVAILABLE = True
    except ImportError:
        CHROMA_AVAILABLE = False
        print("‚ö†Ô∏è Aviso: ChromaIndexer n√£o encontrado. A indexa√ß√£o sem√¢ntica n√£o estar√° dispon√≠vel.")

MODEL_NAME = "gpt-4o"  # modelo atual com suporte a vis√£o
IMAGE_DIR = Path(__file__).parent.parent / "images"  # Diret√≥rio para salvar imagens (raiz do projeto)
PROCESSED_NOTES_FILE = Path(__file__).parent.parent / ".processed_notes.json"  # Arquivo para registro de notas processadas

# Flag para controlar a indexa√ß√£o no ChromaDB
ENABLE_CHROMA_INDEXING = True  # Por padr√£o, ativar indexa√ß√£o


def convert_json_to_obsidian(json_data, output_folder="obsidian_notes"):
    """
    Converte dados JSON para arquivo Markdown do Obsidian
    
    Args:
        json_data (dict): Dados JSON estruturados
        output_folder (str): Diret√≥rio de sa√≠da (padr√£o: obsidian_notes)
    
    Returns:
        bool: True se convers√£o foi bem-sucedida, False caso contr√°rio
    """
    try:
        # Importar dinamicamente para evitar problemas de importa√ß√£o circular
        import importlib.util
        
        # Caminho para o m√≥dulo obsidian_writer (agora na mesma pasta)
        obsidian_writer_path = Path(__file__).parent / "obsidian_writer.py"
        
        # Carregar o m√≥dulo dinamicamente
        spec = importlib.util.spec_from_file_location("obsidian_writer", obsidian_writer_path)
        obsidian_writer = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(obsidian_writer)
        
        # Validar estrutura do JSON
        if not obsidian_writer.validate_json_structure(json_data):
            print("‚ö†Ô∏è Estrutura JSON inv√°lida para convers√£o Obsidian")
            return False
        
        # Converter para Obsidian
        obsidian_writer.json_to_obsidian(json_data, output_folder)
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao converter para Obsidian: {e}")
        return False


def encode_image_to_base64(path):
    """Converte uma imagem para base64"""
    try:
        return base64.b64encode(Path(path).read_bytes()).decode()
    except Exception as e:
        sys.exit(f"Erro ao processar a imagem: {e}")


def transcribe_handwriting(image_path: str) -> str:
    """Transcreve texto manuscrito de uma imagem usando a API OpenAI Vision"""
    # Verificar extens√£o da imagem
    valid_extensions = ['.png', '.jpg', '.jpeg']
    if Path(image_path).suffix.lower() not in valid_extensions:
        sys.exit(f"Extens√£o n√£o suportada. Use: {', '.join(valid_extensions)}")
    
    try:
        base64_img = encode_image_to_base64(image_path)
        
        response = openai.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": (
                                "Todo o texto utilizado para gerar o JSON deve ser extraido da imagem."
                                "A imagem cont√©m texto manuscrito que deve ser transcrito e organizado."
                                "A transcri√ß√£o deve ser feita de forma precisa e fiel ao conte√∫do da imagem"
                                "caso alguma parte fique ilegivel, use a logica para completar a lacuna."
                                "Todo a imagem vir√° dividida em blocos de texto, tarefas, notas e lembretes."
                                "Organize o seguinte texto OCR em formato JSON com os campos:"
                                "title (se houver, ou o dia neste formato dia/mes/ano - segunda-feira(dia da semana)),"
                                "Todas as partes devem vir encaixadas em algum dos campos definidos" 
                                "data (data encontrada no texto ou deixe vazio),"
                                "summary (resuma o conte√∫do em uma frase),"
                                "keywords (at√© 5 palavras-chave relevantes),"
                                "tasks (lista de tarefas com status done ou todo),"
                                "notes (lista de anota√ß√µes gerais),"
                                "reminders (lista de lembretes, coisas a lembrar ou n√£o esquecer)."
                            )
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": f"data:image/png;base64,{base64_img}"}
                        }
                    ],
                }
            ],
        )
        return response.choices[0].message.content.strip()
    except openai.OpenAIError as e:
        sys.exit(f"Erro da API OpenAI: {e}")
    except Exception as e:
        sys.exit(f"Erro ao transcrever texto: {e}")


def process_single_image(img_path):
    """Processa uma √∫nica imagem local (funcionalidade original)"""
    if not Path(img_path).is_file():
        sys.exit("‚ùå Arquivo n√£o encontrado.")
    
    # Transcrever o texto manuscrito
    print("üîç Processando a imagem...")
    texto = transcribe_handwriting(img_path)
    print("\nüìÑ Transcri√ß√£o:")
    print("-" * 50)
    print(texto)
    print("-" * 50)
    
    # Salvar transcri√ß√£o em arquivo
    try:
        # Detectar se o conte√∫do √© JSON v√°lido
        json_data = None
        json_content = None
        
        # Tentar extrair JSON de markdown code blocks primeiro
        import re
        json_match = re.search(r'```(?:json)?\s*\n?(.*?)\n?```', texto, re.DOTALL | re.IGNORECASE)
        if json_match:
            json_content = json_match.group(1).strip()
        else:
            # Se n√£o h√° code blocks, tentar o texto inteiro
            json_content = texto.strip()
        
        try:
            json_data = json.loads(json_content)
            # √â JSON v√°lido, salvar como .json
            out_file = Path(img_path).with_suffix(".json")
            with open(out_file, "w", encoding="utf-8") as f:
                json.dump(json_data, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ JSON estruturado salvo em {out_file}")
            
            # Automaticamente converter para Obsidian
            print("üîÑ Convertendo automaticamente para Obsidian...")
            if convert_json_to_obsidian(json_data):
                print("‚úÖ Arquivo Obsidian gerado com sucesso!")
            else:
                print("‚ö†Ô∏è Falha na convers√£o para Obsidian")
            
            # Indexar no ChromaDB para busca sem√¢ntica
            if CHROMA_AVAILABLE and ENABLE_CHROMA_INDEXING:
                print("üîÑ Indexando no ChromaDB para busca sem√¢ntica...")
                if index_note_in_chroma(json_data):
                    print("‚úÖ Nota indexada com sucesso no ChromaDB!")
                else:
                    print("‚ö†Ô∏è Falha na indexa√ß√£o no ChromaDB")
                
        except json.JSONDecodeError:
            # N√£o √© JSON v√°lido, salvar como .txt
            out_file = Path(img_path).with_suffix(".txt")
            out_file.write_text(texto, encoding="utf-8")
            print(f"‚úÖ Transcri√ß√£o salva em {out_file}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar o arquivo de sa√≠da: {e}")


def main():
    """Fun√ß√£o principal do programa"""
    # Verificar argumentos
    if len(sys.argv) == 1:
        # Modo local - usar a imagem padr√£o
        img_path = Path(__file__).parent / "images" / "ink.png"
        print(f"üñºÔ∏è Modo Local: Usando imagem padr√£o: {img_path}")
        process_single_image(str(img_path))
    elif len(sys.argv) == 2 and sys.argv[1] == "--help":
        # Exibir ajuda
        print("\nüìã Uso do OCR de Notas Manuscritas:")
        print("  python ocr_extractor.py                     # Processar imagem padr√£o")
        print("  python ocr_extractor.py imagem.png          # Processar imagem espec√≠fica")
        print("  python ocr_extractor.py MinhaLabel          # Processar notas do Google Keep com esta label")
        print("\nOp√ß√µes:")
        print("  --no-index, --disable-indexing              # Desativar indexa√ß√£o no ChromaDB")
        print("  --help                                      # Exibir esta ajuda")
        sys.exit(0)
    elif len(sys.argv) == 2 and (Path(sys.argv[1]).is_file() or sys.argv[1].startswith("/")):
        # Modo local - imagem espec√≠fica
        print(f"üñºÔ∏è Modo Local: Processando imagem espec√≠fica: {sys.argv[1]}")
        process_single_image(sys.argv[1])
    elif len(sys.argv) == 2:
        # Modo Google Keep - processar notas com a label especificada
        print(f"üîÑ Modo Google Keep: Buscando notas com a label '{sys.argv[1]}'")
        process_keep_notes(sys.argv[1])
    else:
        sys.exit("üìã Uso:\n"
                 "1. Para processar uma imagem local com a imagem padr√£o:\n"
                 "   python ocr_extractor.py\n\n"
                 "2. Para processar uma imagem local espec√≠fica:\n"
                 "   python ocr_extractor.py caminho/para/sua/imagem.png\n\n"
                 "3. Para processar notas do Google Keep com uma label espec√≠fica:\n"
                 "   python ocr_extractor.py MinhaLabel")


def connect_to_keep():
    """Conecta √† conta do Google Keep usando master token"""
    keep = gkeepapi.Keep()
    
    # Carregar configura√ß√£o
    config = load_keep_credentials()
    email = config.get('GOOGLE_EMAIL')
    master_token = config.get('GOOGLE_MASTER_TOKEN')
    
    # Verifica se as credenciais est√£o no arquivo de configura√ß√£o
    if not email or not master_token:
        sys.exit("‚ùå Credenciais do Google Keep n√£o encontradas."
                "\nPor favor, configure o GOOGLE_EMAIL e o GOOGLE_MASTER_TOKEN no arquivo .env/config"
                "\nVeja CONFIG.md para instru√ß√µes sobre como obter o master token.")
        
    try:
        # Tentar fazer login usando o master token
        print(f"üîë Autenticando com a conta {email} usando master token...")
        keep.resume(email, master_token)
        
        print(f"‚úÖ Conectado com sucesso √† conta Google Keep!")
        return keep
    except Exception as e:
        error_message = str(e)
        sys.exit(f"‚ùå Erro de login no Google Keep: {error_message}\n"
                "Poss√≠veis solu√ß√µes:\n"
                "1. Verifique se o email est√° correto\n"
                "2. O master token pode ter expirado ou ser inv√°lido\n"
                "3. Gere um novo master token seguindo as instru√ß√µes em CONFIG.md\n"
                "4. Configure suas credenciais no arquivo .env/config")


def load_keep_credentials():
    """Carrega as credenciais do Google Keep do arquivo de configura√ß√£o"""
    env_file = Path(__file__).parent.parent / '.env' / 'config'
    config = {}
    
    if env_file.exists():
        try:
            with open(env_file, 'r') as f:
                for line in f:
                    if line.strip() and not line.startswith('#'):
                        if '=' in line:
                            key, value = line.strip().split('=', 1)
                            config[key] = value
        except Exception as e:
            print(f"Aviso: N√£o foi poss√≠vel ler o arquivo de configura√ß√£o: {e}")
    
    # Se o arquivo ainda cont√©m a senha antiga (compatibilidade), avisa para atualizar
    if 'GOOGLE_PASSWORD' in config:
        print("\n‚ö†Ô∏è Aviso: Seu arquivo de configura√ß√£o ainda est√° usando o formato antigo (GOOGLE_PASSWORD).")
        print("Por motivos de seguran√ßa, recomendamos atualizar para usar o master token.")
        print("Veja as instru√ß√µes em CONFIG.md sobre como obter e configurar o master token.\n")
    
    return config


def save_keep_credentials(email, master_token=None):
    """Salva as credenciais do Google Keep no arquivo de configura√ß√£o"""
    env_dir = Path(__file__).parent.parent / '.env'
    env_file = env_dir / 'config'
    
    # Criar diret√≥rio .env se n√£o existir
    if not env_dir.exists():
        env_dir.mkdir()
    
    config = load_keep_credentials() or {}
    config['GOOGLE_EMAIL'] = email
    
    # Salvar master token apenas se fornecido
    if master_token:
        config['GOOGLE_MASTER_TOKEN'] = master_token
    
    # Manter a chave OpenAI se existir
    if 'OPENAI_API_KEY' not in config:
        config['OPENAI_API_KEY'] = os.environ.get('OPENAI_API_KEY', 'sua-chave-api-aqui')
    
    try:
        with open(env_file, 'w') as f:
            f.write("# Arquivo de configura√ß√£o para o OCR de Notas Manuscritas\n")
            f.write("# Chave da API OpenAI e credenciais do Google Keep\n\n")
            
            for key, value in config.items():
                f.write(f"{key}={value}\n")
    except Exception as e:
        print(f"Aviso: N√£o foi poss√≠vel salvar o arquivo de configura√ß√£o: {e}")


def download_blob(blob, note_title, index, keep_instance=None):
    """Baixa qualquer tipo de blob (anexo) de uma nota do Google Keep com m√©todo simplificado"""
    # Se n√£o foi passado keep_instance, tenta usar a vari√°vel global
    if keep_instance is None:
        # Tenta importar e usar vari√°vel global se dispon√≠vel
        try:
            global keep
            keep_instance = keep
        except NameError:
            print("‚ùå Inst√¢ncia do Google Keep n√£o dispon√≠vel")
            return None
    
    # Criar diret√≥rio se n√£o existir
    if not IMAGE_DIR.exists():
        IMAGE_DIR.mkdir(parents=True)
    
    # Sanitizar o t√≠tulo para nome de arquivo
    safe_title = "".join(c if c.isalnum() or c in " -_" else "_" for c in note_title)
    safe_title = safe_title.strip().replace(" ", "_")
    if not safe_title:
        safe_title = "nota"
    
    # Identificador √∫nico: usar ID ou server_id do blob
    blob_id = None
    if hasattr(blob, 'id') and blob.id:
        blob_id = blob.id[:8]
    elif hasattr(blob, 'server_id') and blob.server_id:
        blob_id = blob.server_id[:8]
    
    # Timestamp para garantir unicidade
    from datetime import datetime
    timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
    
    # Nome do arquivo: titulo_timestamp_id_index.png
    file_name = f"{safe_title}_{timestamp}"
    if blob_id:
        file_name += f"_{blob_id}"
    file_name += f"_{index+1}.png"
    
    file_path = IMAGE_DIR / file_name
    print(f"üè∑Ô∏è Nome do arquivo: {file_name}")
    
    # M√©todo √önico: implementa estrat√©gia de fallback em um √∫nico m√©todo
    
    # Estrat√©gia 1: Usar getMediaLink (m√©todo oficial e preferido)
    try:
        print("üîÑ Tentando download via getMediaLink (m√©todo principal)...")
        media_url = keep_instance.getMediaLink(blob)
        if media_url:
            response = requests.get(media_url)
            if response.status_code == 200:
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ Imagem salva com sucesso via getMediaLink")
                return file_path
    except Exception as e:
        print(f"‚ÑπÔ∏è getMediaLink falhou: {e}")
    
    # Estrat√©gia 2: Tenta acessar dados bin√°rios diretamente (para desenhos)
    try:
        print("üîÑ Tentando acessar dados bin√°rios diretamente...")
        binary_data = None
        
        # Tenta extrair bytes do desenho, se dispon√≠vel
        if hasattr(blob, 'drawable') and hasattr(blob.drawable, 'getBytes'):
            binary_data = blob.drawable.getBytes()
        
        if binary_data:
            with open(file_path, 'wb') as f:
                f.write(binary_data)
            print(f"‚úÖ Imagem salva com sucesso via dados bin√°rios")
            return file_path
    except Exception as e:
        print(f"‚ÑπÔ∏è Acesso a dados bin√°rios falhou: {e}")
    
    # Estrat√©gia 3: URL direta baseada no server_id
    try:
        if hasattr(blob, 'server_id') and blob.server_id:
            print("üîÑ Tentando URL direta baseada no server_id...")
            server_id = blob.server_id
            api_url = f"https://keep.google.com/media/v2/{server_id}"
            response = requests.get(api_url)
            if response.status_code == 200:
                with open(file_path, 'wb') as f:
                    f.write(response.content)
                print(f"‚úÖ Imagem salva com sucesso via URL direta")
                return file_path
    except Exception as e:
        print(f"‚ÑπÔ∏è URL direta falhou: {e}")
    
    print("‚ùå Todas as estrat√©gias de download falharam")
    return None


# A fun√ß√£o extract_drawing foi integrada ao download_blob para simplificar o c√≥digo


def process_keep_notes(label_name):
    """Processa notas do Google Keep com a label especificada e criadas hoje"""
    # Conectar ao Google Keep
    global keep  # Tornar a vari√°vel global para uso em outras fun√ß√µes
    keep = connect_to_keep()
    
    # Encontrar a label especificada
    try:
        print(f"üîç Buscando a label '{label_name}' no Google Keep...")
        label = keep.findLabel(label_name)
        if not label:
            sys.exit(f"‚ùå Label '{label_name}' n√£o encontrada. Verifique se voc√™ criou esta label no Google Keep.")
    except Exception as e:
        sys.exit(f"‚ùå Erro ao buscar a label: {e}")
    
    # Op√ß√µes de data: hoje, todas, ou apenas novas
    print("\nEscolha uma op√ß√£o:")
    print("1. Processar apenas notas de hoje")
    print("2. Processar todas as notas com esta label")
    print("3. Processar apenas notas novas (n√£o processadas anteriormente)")
    escolha = input("\nSua escolha [1/2/3]: ").strip()
    
    # Data atual (UTC)
    hoje = datetime.now(timezone.utc).date()
    if escolha == "2":
        print(f"üîç Buscando todas as notas com a label '{label_name}'...")
    elif escolha == "3":
        print(f"üîç Buscando notas n√£o processadas anteriormente com a label '{label_name}'...")
    else:
        print(f"üîç Buscando notas com a label '{label_name}' atualizadas hoje ({hoje.strftime('%d/%m/%Y')})...")
    
    # Encontrar notas com a label especificada
    try:
        notes_with_label = list(keep.find(labels=[label]))
    except Exception as e:
        sys.exit(f"‚ùå Erro ao buscar notas: {e}")
    
    # Mostrar total de notas encontradas com a label
    print(f"üìã Total de notas com a label '{label_name}': {len(notes_with_label)}")
    
    # Filtrar notas conforme a escolha
    if escolha == "1":
        # Apenas notas de hoje
        notes_to_process = [note for note in notes_with_label if note.timestamps.updated.date() == hoje]
    elif escolha == "3":
        # Apenas notas n√£o processadas anteriormente
        notes_to_process = [note for note in notes_with_label 
                           if not is_note_processed(note.id, label_name)]
    else:
        # Todas as notas
        notes_to_process = notes_with_label
    
    if not notes_to_process:
        if escolha == "1":
            print(f"‚ÑπÔ∏è Nenhuma nota com a label '{label_name}' foi encontrada para a data de hoje.")
        elif escolha == "3":
            print(f"‚ÑπÔ∏è Todas as notas com a label '{label_name}' j√° foram processadas anteriormente.")
        else:
            print(f"‚ÑπÔ∏è Nenhuma nota com a label '{label_name}' foi encontrada.")
        return
    
    print(f"‚úÖ Encontradas {len(notes_to_process)} notas para processar.")
    
    # Processar cada nota
    processed_count = 0
    skipped_count = 0
    
    for note in notes_to_process:
        print(f"\n{'=' * 50}")
        print(f"üìù Nota: {note.title or 'Sem t√≠tulo'} (ID: {note.id[:8]})")
        
        # Verificar se a nota j√° foi processada (verifica√ß√£o extra)
        if is_note_processed(note.id, label_name):
            print("‚è≠Ô∏è Esta nota j√° foi processada anteriormente. Pulando...")
            skipped_count += 1
            continue
            
        print(f"{'=' * 50}")
        
        # Verificar se a nota tem anexos (blobs)
        if note.blobs:
            print(f"üìé Encontrados {len(note.blobs)} anexos.")
            blobs_processed = False
            
            # Processar cada anexo
            for i, blob in enumerate(note.blobs):
                try:
                    print(f"\nüñºÔ∏è Processando anexo {i+1}...")
                    
                    # Caminho da imagem a ser processada
                    img_path = None
                    
                    # Abordagem simplificada: tentar baixar o anexo
                    try:
                        print("üîÑ Baixando anexo...")
                        img_path = download_blob(blob, note.title or "sem_titulo", i, keep)
                        if img_path:
                            print(f"üíæ Anexo salvo em: {img_path}")
                        else:
                            print("‚ùå N√£o foi poss√≠vel baixar o anexo")
                            continue  # Passa para o pr√≥ximo anexo
                    except Exception as download_error:
                        print(f"‚ö†Ô∏è Erro ao baixar anexo: {download_error}")
                        print("‚ùå Falha ao baixar anexo")
                        continue  # Passa para o pr√≥ximo anexo
                    
                    # Verificar se √© uma imagem v√°lida
                    if img_path:
                        try:
                            with Image.open(img_path) as img:
                                img_format = img.format
                                print(f"‚úÖ Imagem validada (Formato: {img_format})")
                        except Exception as img_error:
                            print(f"‚ö†Ô∏è O arquivo n√£o √© uma imagem v√°lida: {img_error}")
                            continue
                    
                    # Transcrever o texto manuscrito
                    print("üîç Executando OCR com OpenAI Vision...")
                    texto = transcribe_handwriting(str(img_path))
                    
                    # Exibir a transcri√ß√£o
                    print("\nüìÑ Transcri√ß√£o:")
                    print("-" * 50)
                    print(texto)
                    print("-" * 50)
                    
                    # Salvar a transcri√ß√£o
                    try:
                        # Detectar se o conte√∫do √© JSON v√°lido
                        json_data = None
                        json_content = None
                        
                        # Tentar extrair JSON de markdown code blocks primeiro
                        import re
                        json_match = re.search(r'```(?:json)?\s*\n?(.*?)\n?```', texto, re.DOTALL | re.IGNORECASE)
                        if json_match:
                            json_content = json_match.group(1).strip()
                        else:
                            # Se n√£o h√° code blocks, tentar o texto inteiro
                            json_content = texto.strip()
                        
                        try:
                            json_data = json.loads(json_content)
                            # √â JSON v√°lido, salvar como .json
                            out_file = img_path.with_suffix(".json")
                            with open(out_file, "w", encoding="utf-8") as f:
                                json.dump(json_data, f, indent=2, ensure_ascii=False)
                            print(f"‚úÖ JSON estruturado salvo em: {out_file}")
                            
                            # Automaticamente converter para Obsidian
                            print("üîÑ Convertendo automaticamente para Obsidian...")
                            if convert_json_to_obsidian(json_data):
                                print("‚úÖ Arquivo Obsidian gerado com sucesso!")
                            else:
                                print("‚ö†Ô∏è Falha na convers√£o para Obsidian")
                            
                            # Indexar no ChromaDB para busca sem√¢ntica
                            if CHROMA_AVAILABLE and ENABLE_CHROMA_INDEXING:
                                print("üîÑ Indexando no ChromaDB para busca sem√¢ntica...")
                                if index_note_in_chroma(json_data):
                                    print("‚úÖ Nota indexada com sucesso no ChromaDB!")
                                else:
                                    print("‚ö†Ô∏è Falha na indexa√ß√£o no ChromaDB")
                                
                        except json.JSONDecodeError:
                            # N√£o √© JSON v√°lido, salvar como .txt
                            out_file = img_path.with_suffix(".txt")
                            out_file.write_text(texto, encoding="utf-8")
                            print(f"‚úÖ Transcri√ß√£o salva em: {out_file}")
                        blobs_processed = True
                    except Exception as e:
                        print(f"‚ùå Erro ao salvar o arquivo de sa√≠da: {e}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao processar anexo {i+1}: {e}")
                    # Depurar informa√ß√µes sobre o blob quando h√° erro
                    debug_blob_info(blob)
            
            # Registrar a nota como processada apenas se pelo menos um blob foi processado com sucesso
            if blobs_processed:
                save_processed_note(note.id, label_name)
                processed_count += 1
        else:
            print("‚ÑπÔ∏è Esta nota n√£o cont√©m anexos (imagens).")
    
    # Resumo final
    print(f"\n{'=' * 50}")
    print(f"‚úÖ Processamento conclu√≠do")
    print(f"- Notas processadas: {processed_count}")
    print(f"- Notas puladas (j√° processadas): {skipped_count}")
    print(f"- Total considerado: {len(notes_to_process)}")
    print(f"{'=' * 50}")


def debug_blob_info(blob):
    """Fun√ß√£o para mostrar informa√ß√µes essenciais de um blob para diagn√≥stico"""
    print(f"\nüîç Informa√ß√µes sobre o blob:")
    print(f"- Tipo: {type(blob).__name__}")
    
    # Mostrar apenas informa√ß√µes essenciais
    for attr in ['id', 'type', 'server_id']:
        if hasattr(blob, attr):
            print(f"- {attr}: {getattr(blob, attr)}")
    
    return blob


def load_api_key_from_env_file():
    """Carrega a chave da API OpenAI do arquivo .env/config se dispon√≠vel"""
    config = load_keep_credentials()
    if config and 'OPENAI_API_KEY' in config:
        return config['OPENAI_API_KEY']
    return None


def load_processed_notes():
    """Carrega a lista de IDs de notas j√° processadas do arquivo de registro"""
    if not PROCESSED_NOTES_FILE.exists():
        return {}
    
    try:
        with open(PROCESSED_NOTES_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar registro de notas processadas: {e}")
        return {}


def save_processed_note(note_id, label_name):
    """Adiciona uma nota ao registro de notas processadas"""
    processed_notes = load_processed_notes()
    
    # Organizar por label
    if label_name not in processed_notes:
        processed_notes[label_name] = []
    
    # Adicionar ID da nota se ainda n√£o estiver na lista
    if note_id not in processed_notes[label_name]:
        processed_notes[label_name].append(note_id)
    
    try:
        with open(PROCESSED_NOTES_FILE, 'w') as f:
            json.dump(processed_notes, f, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar registro de notas processadas: {e}")


def is_note_processed(note_id, label_name):
    """Verifica se uma nota j√° foi processada anteriormente"""
    processed_notes = load_processed_notes()
    
    return (label_name in processed_notes and 
            note_id in processed_notes[label_name])

if __name__ == "__main__":
    # Processar argumentos de linha de comando para op√ß√µes
    disable_indexing = False
    
    # Verificar op√ß√µes nos argumentos
    args_to_remove = []
    for i, arg in enumerate(sys.argv):
        if arg == "--no-index" or arg == "--disable-indexing":
            disable_indexing = True
            args_to_remove.append(i)
    
    # Remover argumentos de op√ß√£o para n√£o interferir com o processamento normal
    for i in sorted(args_to_remove, reverse=True):
        sys.argv.pop(i)
    
    # Desativar indexa√ß√£o se solicitado
    if disable_indexing:
        ENABLE_CHROMA_INDEXING = False
        print("‚ÑπÔ∏è Indexa√ß√£o no ChromaDB desativada pelo argumento de linha de comando")
    
    # Verificar API key para OpenAI
    api_key = os.environ.get("OPENAI_API_KEY") or load_api_key_from_env_file()
    
    if not api_key:
        sys.exit("Erro: Defina a vari√°vel de ambiente OPENAI_API_KEY ou configure-a no arquivo .env/config.")
    elif api_key.startswith("sua-chave-api-aqui"):
        sys.exit("Erro: Substitua 'sua-chave-api-aqui' pela sua chave real da API OpenAI no arquivo .env/config.")
    
    try:
        # Configurar cliente OpenAI com a API key
        openai.api_key = api_key
        
        # Verificar se o arquivo de configura√ß√£o possui as credenciais do Google Keep
        # para alertar o usu√°rio antecipadamente
        if len(sys.argv) > 1 and not Path(sys.argv[1]).is_file() and not sys.argv[1].startswith("/"):
            config = load_keep_credentials()
            if not config.get('GOOGLE_EMAIL') or not config.get('GOOGLE_MASTER_TOKEN'):
                print("‚ö†Ô∏è Aviso: Credenciais do Google Keep n√£o configuradas!")
                print("Para usar a funcionalidade do Google Keep, configure GOOGLE_EMAIL e GOOGLE_MASTER_TOKEN")
                print("no arquivo .env/config conforme instru√ß√µes em CONFIG.md")
                choice = input("Deseja continuar mesmo assim? [s/N]: ")
                if choice.lower() != 's':
                    sys.exit("Opera√ß√£o cancelada pelo usu√°rio.")
        
        # Exibir vers√£o atual
        versao = "0.8.0"
        print(f"\n{'=' * 58}\n{'üìù OCR de Notas Manuscritas - Vers√£o ' + versao:^58}\n{'=' * 58}")
        
        main()
    except KeyboardInterrupt:
        sys.exit("\nOpera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        sys.exit(f"Erro n√£o esperado: {e}")

# Fun√ß√£o detect_blob_type removida por n√£o estar sendo utilizada
