#!/usr/bin/env python3
"""
Obsidian Exporter - Converte JSON estruturado em arquivos Markdown para Obsidian

Este m√≥dulo fornece uma interface unificada para converter dados JSON extra√≠dos do OCR 
em arquivos .md compat√≠veis com Obsidian. Centraliza toda a l√≥gica de exporta√ß√£o
que estava distribu√≠da no c√≥digo.

Autor: Thiago Macedo
Data: 29/05/2025
Vers√£o: 1.0.0
"""

import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional

# Importar o m√≥dulo obsidian_writer existente
from .obsidian_writer import json_to_obsidian, validate_json_structure

# Configurar logging
logger = logging.getLogger(__name__)


def convert_to_md(json_data: Dict[str, Any], output_folder: Optional[str] = None) -> bool:
    """
    Converte dados JSON estruturados em arquivo Markdown para Obsidian
    
    Esta √© a fun√ß√£o principal que deve ser usada por outros m√≥dulos para gerar
    arquivos Obsidian. Ela encapsula toda a l√≥gica de valida√ß√£o e convers√£o.
    
    Args:
        json_data: Dados estruturados do OCR contendo title, data, summary, 
                  keywords, tasks, notes, reminders
        output_folder: Pasta onde salvar o arquivo .md. Se None, usa 'obsidian_notes'
    
    Returns:
        True se a convers√£o foi bem-sucedida, False caso contr√°rio
        
    Examples:
        >>> data = {"title": "Teste", "summary": "Resumo teste", "tasks": []}
        >>> success = convert_to_md(data, "minha_pasta")
        >>> print(success)  # True
    """
    try:
        # Usar pasta padr√£o se n√£o especificada
        if output_folder is None:
            output_folder = "obsidian_notes"
        
        logger.info(f"üîÑ Convertendo para Obsidian: {json_data.get('title', 'Sem t√≠tulo')}")
        
        # Validar estrutura JSON
        if not validate_json_structure(json_data):
            logger.error("‚ùå Estrutura JSON inv√°lida para convers√£o Obsidian")
            return False
        
        # Converter para Obsidian usando o m√≥dulo existente
        json_to_obsidian(json_data, output_folder)
        
        logger.info(f"‚úÖ Arquivo Obsidian gerado com sucesso em {output_folder}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao converter para Obsidian: {e}")
        return False


def batch_convert_to_md(json_files: list, output_folder: Optional[str] = None) -> Dict[str, bool]:
    """
    Converte m√∫ltiplos arquivos JSON em arquivos Markdown para Obsidian
    
    Args:
        json_files: Lista de caminhos para arquivos JSON
        output_folder: Pasta onde salvar os arquivos .md
    
    Returns:
        Dicion√°rio com o resultado de cada convers√£o {arquivo: sucesso}
    """
    results = {}
    
    logger.info(f"üîÑ Convertendo {len(json_files)} arquivos JSON para Obsidian")
    
    for json_file in json_files:
        try:
            json_path = Path(json_file)
            
            if not json_path.exists():
                logger.warning(f"‚ö†Ô∏è Arquivo n√£o encontrado: {json_file}")
                results[str(json_file)] = False
                continue
            
            # Carregar JSON
            with open(json_path, 'r', encoding='utf-8') as f:
                json_data = json.load(f)
            
            # Converter
            success = convert_to_md(json_data, output_folder)
            results[str(json_file)] = success
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar {json_file}: {e}")
            results[str(json_file)] = False
    
    successful = sum(1 for success in results.values() if success)
    logger.info(f"üìä Convers√£o em lote conclu√≠da: {successful}/{len(json_files)} sucessos")
    
    return results


def validate_and_convert_to_md(json_data: Dict[str, Any], output_folder: Optional[str] = None) -> bool:
    """
    Valida dados JSON e converte para Markdown se v√°lidos
    
    Args:
        json_data: Dados JSON para validar e converter
        output_folder: Pasta de destino
    
    Returns:
        True se valida√ß√£o e convers√£o foram bem-sucedidas
    """
    try:
        # Valida√ß√£o b√°sica de campos obrigat√≥rios
        required_fields = ['title', 'summary']
        missing_fields = [field for field in required_fields if not json_data.get(field)]
        
        if missing_fields:
            logger.warning(f"‚ö†Ô∏è Campos obrigat√≥rios ausentes: {missing_fields}")
            return False
        
        # Converter usando a fun√ß√£o principal
        return convert_to_md(json_data, output_folder)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na valida√ß√£o e convers√£o: {e}")
        return False


def get_obsidian_output_path(output_folder: Optional[str] = None) -> Path:
    """
    Retorna o caminho absoluto da pasta de sa√≠da do Obsidian
    
    Args:
        output_folder: Nome da pasta de sa√≠da (opcional)
    
    Returns:
        Path object para a pasta de sa√≠da
    """
    if output_folder is None:
        output_folder = "obsidian_notes"
    
    # Se for caminho relativo, usar em rela√ß√£o ao diret√≥rio raiz do projeto
    if not Path(output_folder).is_absolute():
        root_dir = Path(__file__).parent.parent
        return root_dir / output_folder
    
    return Path(output_folder)


# Manter compatibilidade com c√≥digo antigo
def convert_json_to_obsidian(json_data: Dict[str, Any], output_folder: str = "obsidian_notes") -> bool:
    """
    Fun√ß√£o de compatibilidade - redireciona para convert_to_md
    
    Args:
        json_data: Dados JSON estruturados
        output_folder: Pasta de destino
    
    Returns:
        True se convers√£o foi bem-sucedida
    """
    logger.warning("‚ö†Ô∏è Usando fun√ß√£o deprecated 'convert_json_to_obsidian'. Use 'convert_to_md' no lugar.")
    return convert_to_md(json_data, output_folder)


if __name__ == "__main__":
    """Teste simples do m√≥dulo"""
    import logging
    
    # Configurar logging para teste
    logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
    
    # Dados de teste
    test_data = {
        "title": "Teste Obsidian Exporter",
        "data": "29/05/2025",
        "summary": "Teste do m√≥dulo de exporta√ß√£o para Obsidian",
        "keywords": ["teste", "obsidian", "exporta√ß√£o"],
        "tasks": [
            {"task": "Criar m√≥dulo exporter", "status": "done"},
            {"task": "Testar convers√£o", "status": "todo"}
        ],
        "notes": [
            "M√≥dulo criado com sucesso",
            "Documenta√ß√£o adicionada"
        ],
        "reminders": [
            "Testar com dados reais"
        ]
    }
    
    print("üß™ Testando Obsidian Exporter...")
    
    # Teste da fun√ß√£o principal
    success = convert_to_md(test_data, "test_obsidian_output")
    
    if success:
        print("‚úÖ Teste bem-sucedido!")
    else:
        print("‚ùå Teste falhou!")
