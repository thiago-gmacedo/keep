#!/bin/bash
# Script de execu√ß√£o programada do pipeline OCR Keep
# Executa diariamente √†s 1h e 4h da manh√£
# Processa apenas notas com a label "Anota√ß√µes di√°rias"

# Diret√≥rio do projeto
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Criar diret√≥rio de logs se n√£o existir
mkdir -p logs

# Fun√ß√£o de log
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a logs/pipeline.log
}

# Fun√ß√£o para verificar se √© hora de executar (1h ou 4h da manh√£)
is_execution_time() {
    current_hour=$(date '+%H')
    current_minute=$(date '+%M')
    
    # Executar √†s 1:00 ou 4:00 (janela de 5 minutos: 00-04)
    if [[ "$current_hour" == "02" && "$current_minute" == "45" ]]; then
        return 0  # √â hora de executar
    else
        return 1  # N√£o √© hora de executar
    fi
}

# Fun√ß√£o para calcular pr√≥ximo hor√°rio de execu√ß√£o
next_execution_time() {
    current_hour=$(date '+%H')
    current_minute=$(date '+%M')
    
    if [[ "$current_hour" -lt "01" ]]; then
        echo "hoje √†s 01:00"
    elif [[ "$current_hour" -eq "01" && "$current_minute" -ge "05" ]] || [[ "$current_hour" -gt "01" && "$current_hour" -lt "04" ]]; then
        echo "hoje √†s 04:00"
    elif [[ "$current_hour" -eq "04" && "$current_minute" -ge "05" ]] || [[ "$current_hour" -gt "04" ]]; then
        echo "amanh√£ √†s 01:00"
    else
        echo "hoje √†s $(date '+%H'):$(date '+%M')"
    fi
}

log_message "üöÄ Iniciando execu√ß√£o agendada do pipeline OCR Keep"
log_message "üìÅ Diret√≥rio: $SCRIPT_DIR"
log_message "üè∑Ô∏è Filtro de label: 'Anota√ß√µes di√°rias'"
log_message "‚è∞ Hor√°rios de execu√ß√£o: 01:00 e 04:00 (diariamente)"
log_message "üîÑ Pr√≥xima execu√ß√£o: $(next_execution_time)"

# Trap para capturar sinais e parar graciosamente
trap 'log_message "üõë Execu√ß√£o agendada interrompida pelo usu√°rio"; exit 0' INT TERM

# Fun√ß√£o para executar o pipeline
run_pipeline() {
    log_message "üîÑ Executando pipeline..."
    
    # Executar o pipeline principal com label 'Anota√ß√µes di√°rias'
    python -m src.main "Anota√ß√µes di√°rias" >> logs/pipeline.log 2>&1
    exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        log_message "‚úÖ Pipeline executado com sucesso"
    else
        log_message "‚ùå Pipeline falhou com c√≥digo de sa√≠da: $exit_code"
    fi
    
    return $exit_code
}

# Loop principal para execu√ß√£o agendada
while true; do
    if is_execution_time; then
        log_message "‚è∞ Hor√°rio de execu√ß√£o detectado: $(date '+%H:%M')"
        run_pipeline
        
        # Aguardar at√© passar da hora atual para evitar m√∫ltiplas execu√ß√µes
        while is_execution_time; do
            log_message "‚åõ Aguardando fim da janela de execu√ß√£o..."
            sleep 60  # Aguardar 1 minuto
        done
        
        log_message "üìÖ Pr√≥xima execu√ß√£o: $(next_execution_time)"
        log_message "---"
    else
        # Verificar a cada 5 minutos se chegou o hor√°rio
	log_message "N√£o est√° no momento schedulado."
        sleep 300
    fi
done
